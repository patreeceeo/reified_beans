---
import Layout from "src/layouts/Layout.astro";
---
<Layout title="Test Instructions">
  <h1>Test Instructions</h1>
  <output id="tests">
  </output>
</Layout>
<script>
import {instPush} from "src/instructions";
import {instStore} from "src/instructions";
import {instDuplicate} from "src/instructions";
import {instPushSpecialVal} from "src/instructions";
import {instPopAndJumpOnTrue} from "src/instructions";
import {SpecialReturnValue} from "src/instructions";
import {instSuperSendSpecialSelector} from "src/instructions";
import {instPopAndStoreTempVar} from "src/instructions";
import {EvaluationStackType} from "src/instructions";
import {instPopAndStoreReceiverVar} from "src/instructions";
import {instSuperSendLiteralSelectorExt} from "src/instructions";
import {instSendLiteralSelectorExt} from "src/instructions";
import {instSendSpecialSelector} from "src/instructions";
import {instReturnStackTopFrom} from "src/instructions";
import {SpecialSelector} from "src/instructions";
import {instPopAndJumpOnFalse} from "src/instructions";
import {instReturnSpecialVal} from "src/instructions";
import {SpecialPushValue} from "src/instructions";
import {instPopAndStore} from "src/instructions";
import {StoreTarget} from "src/instructions";
import {PushSource} from "src/instructions";
import {instJump} from "src/instructions";
import {InstructionReader, InstructionWriter, instPop, peekInstruction} from "src/instructions";

  const testsEl = document.getElementById('tests')!;
  const insts = new Int16Array(100);
  const writer = new InstructionWriter(insts);
  const reader = new InstructionReader(insts);

  instPop.writeWith(writer)
  instJump.writeWith(writer, 5)
  instJump.writeWith(writer, -5)
  instPush.writeWith(writer, PushSource.LiteralConst, 42)
  instStore.writeWith(writer, StoreTarget.LiteralVar, 2)
  instDuplicate.writeWith(writer)
  instPopAndStore.writeWith(writer, StoreTarget.ReceiverVar, 3)
  instPushSpecialVal.writeWith(writer, SpecialPushValue.Two)
  instReturnSpecialVal.writeWith(writer, SpecialReturnValue.Self)
  instPopAndJumpOnTrue.writeWith(writer, 5)
  instPopAndJumpOnTrue.writeWith(writer, -5)
  instPopAndJumpOnFalse.writeWith(writer, 5)
  instPopAndJumpOnFalse.writeWith(writer, -5)
  instSuperSendSpecialSelector.writeWith(writer, SpecialSelector.BitAnd, 2)
  instPopAndStoreTempVar.writeWith(writer, 2)
  instReturnStackTopFrom.writeWith(writer, EvaluationStackType.Block)
  instSendSpecialSelector.writeWith(writer, SpecialSelector.BlockCopy, 0)
  instPopAndStoreReceiverVar.writeWith(writer, 7)
  instSendLiteralSelectorExt.writeWith(writer, 213, 4)
  instSuperSendLiteralSelectorExt.writeWith(writer, 133, 3)
  
  while (!reader.finished && reader.peek() !== 0) {
    const inst = peekInstruction(reader)

    const args = [] as number[]
    inst.readArgs(reader, args)

    testsEl.innerHTML +=`
    <p>${inst.explain(...args)}</p>
  `
  }
</script>
