---
import BlocklyWorkspace from '../components/BlocklyWorkspace.astro';
import Layout from '../layouts/Layout.astro';
import Split from '../layouts/Split.astro';
---
<Layout>
  <Split id="pageContainer">
    <section slot="1">
      Hello
    </section>
    <section slot="2">
      <label><input id="toggleGeneratedCode" type="checkbox"/>Show Generated Code</label>
      <button class="spacer">&nbsp;</button>
      <BlocklyWorkspace/>
      <pre id="generated"><code></code></pre>
    </section>
  </Split>
</Layout>
<style>
  #generated {
    position: absolute;
    z-index: 1;
    background-color: rgb(247, 240, 228);
  }

  #pageContainer {
    height: 100vh;
  }

  .spacer {
    opacity: 0;
  }
</style>
<script>
  import { Checkbox } from '../inputs/Checkbox.ts';
  import type {SplitLayout} from '../layouts/Split';
  import {False, True, BooleanObject} from '../BooleanObject';
  import {AnimationFrameStream} from '../streams';
  import {returning} from '../functions';
  import {copyOffsetParentTransform} from '../htmlElement';
  import type {BlocklyWorkspace} from '../components/BlocklyWorkspace';

  const blocklyWorkspace = document.querySelector('blockly-workspace') as BlocklyWorkspace;
  const toggle = new Checkbox('#toggleGeneratedCode');
  const split = document.getElementById('pageContainer') as SplitLayout;
  const animationFrame = new AnimationFrameStream(20);
  const generatedElement = document.getElementById('generated')!;
  const generatedCode = generatedElement.querySelector('code')!;
  let windowWasResized: BooleanObject = True;

  window.addEventListener('resize', () => {
    windowWasResized = True;
  });

  const returnFalse = returning(False);

  animationFrame.subscribe(() => {
    const {checked} = toggle;
    generatedElement.style.display = checked.if(() => 'block', () => 'none');
    split.changed = split.changed.if(resizeWorkspace, returnFalse);
    windowWasResized = windowWasResized.if(resizeWorkspace, returnFalse);
    blocklyWorkspace.hasMeaningfulChanges = blocklyWorkspace.hasMeaningfulChanges.if(useGeneratedCode, returnFalse);
  });
  setTimeout(() => animationFrame.start(), 100);


  function resizeWorkspace() {
    copyOffsetParentTransform(blocklyWorkspace, generatedElement);
    blocklyWorkspace.adjustSize();
    return False;
  };

  function useGeneratedCode() {
    // Need to use JS interpreter to be able to remember the state of the variables
    // But if ultimately using Blockly, I don't need to parse the code to know when an assignment has happened.
    // While we're on that topic, it seems inefficient to have Blocly generate JS code only to parse it again.
    // I wonder if I can modify Blockly and the JS interpreter to communicate directly via syntax tree...

    /* Idea: Use javascriptGenerator.STATEMENT_SUFFIX to capture the state of variables at each line
    const scope = {};

    for(const v of ws.getAllVariables()) {
      code += `;scope['${v.name}'] = ${v.name}`
    }

    eval(code);
     */
    generatedCode.textContent = blocklyWorkspace.generateCode();
    return False;
  }
</script>
