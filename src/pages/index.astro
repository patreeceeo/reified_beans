---
import BlocklyWorkspace from 'src/components/BlocklyWorkspace.astro';
import Layout from 'src/layouts/Layout.astro';
import Split from 'src/layouts/Split.astro';
---
<Layout title="Editor">
  <Split id="pageContainer">
    <section slot="1">
      Hello
    </section>
    <section slot="2">
      <label><input id="toggleGeneratedCode" type="checkbox"/>Show Generated Code</label>
      <button class="spacer">&nbsp;</button>
      <BlocklyWorkspace/>
      <pre id="generated"></pre>
    </section>
  </Split>
</Layout>
<style>
  #generated {
    position: absolute;
    z-index: 1;
    background-color: rgb(247, 240, 228);
  }

  #pageContainer {
    height: 100vh;
  }

  .spacer {
    opacity: 0;
  }
</style>
<script>
  import { Checkbox } from '../inputs/Checkbox.ts';
  import type {SplitLayout} from '../layouts/Split';
  import {False, True } from '../messagePassing/boolean';
  import {AnimationFrameStream} from '../streams';
  import {returning} from '../functions';
  import {copyOffsetParentTransform} from '../htmlElement';
  import type {BlocklyWorkspace} from '../components/BlocklyWorkspace';

  const blocklyWorkspace = document.querySelector('blockly-workspace') as BlocklyWorkspace;
  const toggle = new Checkbox('#toggleGeneratedCode');
  const split = document.getElementById('pageContainer') as SplitLayout;
  const animationFrame = new AnimationFrameStream(20);
  const generatedCodeElement = document.getElementById('generated')!;
  let windowWasResized = True;

  window.addEventListener('resize', () => {
    windowWasResized = True;
  });

  const returnFalse = returning(False);

  const frameHandlers = [
    () => {
      const {checked} = toggle;
      generatedCodeElement.style.display = checked.if(() => 'block', () => 'none');
    },
    () => {
      split.changed = split.changed.if(resizeWorkspace, returnFalse);
    },
    () => {
      windowWasResized = windowWasResized.if(resizeWorkspace, returnFalse);
    },
    () => {
      blocklyWorkspace.hasMeaningfulChanges.if(useGeneratedCode, returnFalse);
    }];

  for(const handler of frameHandlers) {
    animationFrame.subscribe(handler);
  }

  setTimeout(() => animationFrame.start(), 100);


  function resizeWorkspace() {
    copyOffsetParentTransform(blocklyWorkspace, generatedCodeElement);
    blocklyWorkspace.adjustSize();
    return False;
  };

  function useGeneratedCode() {
    const machine = blocklyWorkspace.compileWorkspace();
    const result = machine.run();
    console.log("Result", result);
    blocklyWorkspace.hasMeaningfulChanges = False;
  }

</script>
