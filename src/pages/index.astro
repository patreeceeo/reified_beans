---
import BlocklyWorkspace from 'src/components/BlocklyWorkspace.astro';
import MachineXRay from 'src/components/MachineXRay.astro';
import Layout from 'src/layouts/Layout.astro';
import Split from 'src/layouts/Split.astro';

// TODO:
// - Test suite
// - Dev tools
// - Accumulate changes in to the workspace in a "image" a la smalltalk
// - Show state of variables at each step
// - Compile VM to WebAssembly

---
<Layout title="Editor">
  <Split id="pageContainer">
    <section slot="1">
      <BlocklyWorkspace/>
    </section>
    <section slot="2" id="output">
      <MachineXRay/>
    </section>
  </Split>
</Layout>
<style>
  #pageContainer {
    height: 100vh;
  }

  #output {
    background-color: lightskyblue;
  }
</style>
<script>
  import type {SplitLayout} from '../layouts/Split';
  import {AnimationFrameStream} from '../streams';
  import type {BlocklyWorkspace} from '../components/BlocklyWorkspace';
  import {MachineXRay} from 'src/components/MachineXRay';

  const blocklyWorkspace = document.querySelector('blockly-workspace') as BlocklyWorkspace;
  const split = document.getElementById('pageContainer') as SplitLayout;
  const machineXRay = MachineXRay.findElement();
  const animationFrame = new AnimationFrameStream(20);
  let windowWasResized = true;
  let needRender = true;

  window.addEventListener('resize', () => {
    windowWasResized = true;
  });

  const frameHandlers = [
    () => {
      if(split.changed) {
        resizeWorkspace();
        split.changed = false;
      }
    },
    () => {
      if(windowWasResized) {
        resizeWorkspace();
        windowWasResized = false;
      }
    },
    () => {
      if(machineXRay.isConnected && needRender) {
        machineXRay.render();
        needRender = false;
      }
    },
    () => {
      if(blocklyWorkspace.hasMeaningfulChanges) {
        useGeneratedCode();
        blocklyWorkspace.hasMeaningfulChanges = false;
      }
    },
  ];

  for(const handler of frameHandlers) {
    animationFrame.subscribe(handler);
  }

  setTimeout(() => animationFrame.start(), 500);

  function resizeWorkspace() {
    blocklyWorkspace.adjustSize();
  };

  function useGeneratedCode() {
    const machine = blocklyWorkspace.compileWorkspace();
    try {
        machine.run();
    } catch (e) {
      console.error(e);
    }
    machineXRay.machine = machine;
    needRender = true;
  }
</script>
